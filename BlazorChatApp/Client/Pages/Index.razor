@page "/"
@inject NavigationManager NavigationManager
@inject NavigationManager UriHelper
@inject IJSRuntime JSRuntime 

<PageTitle>SignalR Chat</PageTitle>
<h3 class="text-lg-center" style="margin-top: 20px; margin-bottom: 20px; font-weight: bold;">SignalR Chat</h3>

@if (!IsConnected)
{
    
    <div class="col-4 offset-4"> 
        <div class="input-group">
            <input @bind="username" class="form-control" placeholder="What's your name?">
            <button class="btn btn-primary form-control-append" @onclick="Connect">
                <span class="oi oi-account-login"> </span>
                 Connect
            </button>
        </div>
    </div>
}
else
{
    <textarea style="width: 100%; height: 500px;" @ref="TextAreaRef">
        @messages
    </textarea>  
    <div class="input-group">
        <button class="btn btn-danger">
            <span class="oi oi-account-logout"> </span>
        </button>
        <input @bind-value="message"
        @bind-value:event="oninput"
        @onkeyup="HandleInput"
        class="form-control">
        <button class="btn btn-primary form-group-append"
            @onclick="Send"
            disabled="@(!IsConnected)">
            <span class="oi oi-envelope-closed"> </span>
             Send
        </button>
    </div>
}

@code{
    private HubConnection? hubConnection;
    public string messages = string.Empty;
    public string username = string.Empty;
    public string message = string.Empty;
    private List<string> users = new List<string>();
    ElementReference TextAreaRef;

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"/chathub?username={username}"))
            .Build();

        hubConnection.On<string, string>("GetThatMessageDude", (user, message) =>
        {
            var msg = $" {(string.IsNullOrEmpty(user) ? "" : user + ": ")}{message}";
            messages += msg + "\n";
            JSRuntime.InvokeVoidAsync("scrollToBottom", TextAreaRef);
            StateHasChanged();
        });
        users.Add(username);

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        //Todo: Change color of other users messages
        //foreach (var item in users)
        //{
        //    if(item)
        //}

        if(hubConnection != null)
        {
            await hubConnection.SendAsync("AddMessageToChat", username, message);
            message = string.Empty;
        }
    }
    private async Task HandleInput(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter"))
            await Send();
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
            await hubConnection.DisposeAsync();
    }


}